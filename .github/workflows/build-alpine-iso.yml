name: Build Alpine ISO with hardclone-cli

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ALPINE_VERSION: "v3.18"
  ALPINE_ARCH: "x86_64"

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          squashfs-tools \
          xorriso \
          syslinux-utils \
          genisoimage \
          curl \
          wget \
          git \
          python3 \
          python3-pip \
          python3-setuptools \
          python3-dev \
          python3-dialog \
          dialog \
          tar \
          gzip

    - name: Setup Alpine build environment
      run: |
        # Tworzenie struktury katalog√≥w
        mkdir -p alpine-build/{src,pkg,apks}
        
        echo "‚úÖ ≈örodowisko przygotowane"

    - name: Build hardclone-cli package
      run: |
        cd alpine-build
        
        # Tworzenie prostego pakietu bez APKBUILD (bezpo≈õrednio)
        echo "üì¶ Tworzenie pakietu hardclone-cli..."
        
        # Tworzenie struktury pakietu
        mkdir -p pkg/usr/bin
        mkdir -p pkg/.PKGINFO
        
        # Tworzenie prostego skryptu hardclone
        cat > pkg/usr/bin/hardclone << 'EOF'
        #!/bin/sh
        echo "hardclone-cli v2.1.4 - Hardware cloning utility"
        echo "This is a demo version for Alpine Linux"
        echo ""
        echo "Usage: hardclone [options]"
        echo "  --help    Show this help"
        echo "  --version Show version"
        echo ""
        echo "Demo commands available:"
        echo "  hardclone --disk-info    Show disk information"
        echo "  hardclone --list-drives  List available drives"
        
        case "$1" in
          --help|-h)
            echo "Help displayed above"
            ;;
          --version|-v)
            echo "hardclone-cli v2.1.4"
            ;;
          --disk-info)
            echo "=== Disk Information ==="
            lsblk 2>/dev/null || echo "lsblk not available"
            ;;
          --list-drives)
            echo "=== Available Drives ==="
            ls -la /dev/sd* /dev/nvme* 2>/dev/null || echo "No drives found"
            ;;
          *)
            echo "Use --help for available options"
            ;;
        esac
        EOF
        
        chmod +x pkg/usr/bin/hardclone
        
        # Tworzenie .PKGINFO (metadane pakietu APK)
        cat > pkg/.PKGINFO << 'EOF'
        pkgname = hardclone-cli
        pkgver = 2.1.4-r0
        pkgdesc = Hardware cloning utility
        url = https://github.com/yourusername/hardclone-cli
        builddate = 1693353600
        packager = Auto Builder <builder@example.com>
        size = 2048
        arch = x86_64
        origin = hardclone-cli
        commit = demo123
        maintainer = Auto Builder <builder@example.com>
        EOF
        
        # Tworzenie w≈Ça≈õciwego pakietu APK
        cd pkg
        
        # Tworzenie control.tar.gz (metadane)
        tar -czf ../control.tar.gz .PKGINFO
        
        # Tworzenie data.tar.gz (pliki)
        tar -czf ../data.tar.gz usr/
        
        # Tworzenie pakietu APK (ar archive)
        cd ..
        echo "2.0" > debian-binary
        ar r apks/hardclone-cli-2.1.4-r0.apk debian-binary control.tar.gz data.tar.gz
        
        # SprzƒÖtanie
        rm debian-binary control.tar.gz data.tar.gz
        
        echo "‚úÖ Pakiet hardclone-cli zbudowany (format APK)"
        
        # Sprawdzenie czy plik zosta≈Ç utworzony
        echo "üìã Zawarto≈õƒá katalogu apks:"
        ls -la apks/
        file apks/hardclone-cli-2.1.4-r0.apk

    - name: Create APK repository index
      run: |
        cd alpine-build/apks
        
        echo "üì¶ Tworzenie indeksu repozytorium APK..."
        
        # Sprawdzenie czy katalog istnieje i czy sƒÖ w nim pakiety
        if [ ! -d "$(pwd)" ]; then
          echo "‚ùå Katalog apks nie istnieje"
          exit 1
        fi
        
        echo "üìã Zawarto≈õƒá katalogu apks:"
        ls -la
        
        # Sprawdzenie czy sƒÖ pakiety
        if ls *.apk 1> /dev/null 2>&1; then
          for apk in *.apk; do
            echo "Processing: $apk"
            if ! tar -tzf "$apk" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è  Nie mo≈ºna wyciƒÖgnƒÖƒá metadanych z $apk, u≈ºywam domy≈õlnych"
            fi
          done
        else
          echo "‚ùå Brak plik√≥w APK w katalogu"
          exit 1
        fi
        
        # Generowanie klucza podpisywania (tymczasowy)
        echo "üîê Generowanie tymczasowego klucza podpisywania..."
        openssl genrsa -out signing.key 2048
        openssl rsa -in signing.key -pubout -out signing.pub
        
        # Tworzenie prostego indeksu APKINDEX
        cat > APKINDEX << 'EOF'
        C:Q1/hardclone-cli-2.1.4-r0
        P:hardclone-cli
        V:2.1.4-r0
        A:x86_64
        S:1024
        I:2048
        T:Hardware cloning utility
        U:https://github.com/yourusername/hardclone-cli
        L:MIT
        o:hardclone-cli
        m:Your Name <your.email@example.com>
        t:1693353600
        c:Q1ABCD1234567890

        EOF
        
        # Kompresja indeksu
        tar -czf APKINDEX.tar.gz APKINDEX
        
        # Podpisanie indeksu (opcjonalne)
        if command -v openssl >/dev/null 2>&1; then
          echo "üîè Podpisywanie indeksu..."
          openssl dgst -sha1 -sign signing.key APKINDEX.tar.gz | openssl base64 > APKINDEX.tar.gz.sig
          echo "‚úÖ Indeks podpisany"
        else
          echo "‚ö†Ô∏è  Brak OpenSSL, pomijam podpisywanie indeksu"
        fi
        
        echo "‚úÖ Indeks repozytorium utworzony:"
        ls -la APKINDEX.tar.gz*

    - name: Download and prepare Alpine ISO
      run: |
        echo "üîΩ Pobieranie Alpine Linux ISO..."
        mkdir -p iso-download
        cd iso-download
        
        # Pobieranie standardowego Alpine ISO
        ISO_URL="https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/releases/${{ env.ALPINE_ARCH }}/alpine-standard-3.18.0-${{ env.ALPINE_ARCH }}.iso"
        
        echo "Pobieranie z: $ISO_URL"
        if ! wget -O alpine-standard.iso "$ISO_URL"; then
          echo "‚ùå B≈ÇƒÖd pobierania ISO"
          exit 1
        fi
        
        echo "‚úÖ Alpine ISO pobrane"
        ls -la alpine-standard.iso

    - name: Extract ISO contents
      run: |
        echo "üì¶ Rozpakowywanie zawarto≈õci ISO..."
        mkdir -p iso-contents
        cd iso-download
        
        # Montowanie ISO i kopiowanie zawarto≈õci
        sudo mkdir -p /mnt/iso
        sudo mount -o loop alpine-standard.iso /mnt/iso
        sudo cp -r /mnt/iso/* ../iso-contents/
        sudo umount /mnt/iso
        sudo chown -R $USER:$USER ../iso-contents/
        
        echo "‚úÖ Zawarto≈õƒá ISO rozpakowana"
        ls -la ../iso-contents/

    - name: Modify modloop
      run: |
        # Lokalizacja modloop w ISO
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        elif [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        else
          echo "‚ùå Nie mo≈ºna znale≈∫ƒá modloop"
          echo "Dostƒôpne pliki w boot:"
          find iso-contents -name "*modloop*" -type f
          find iso-contents/boot -type f 2>/dev/null || true
          exit 1
        fi
        
        echo "üì¶ Rozpakowywanie modloop z: $MODLOOP_PATH"
        mkdir -p modloop-modify
        
        # Rozpakowanie modloop
        if command -v unsquashfs >/dev/null 2>&1; then
          unsquashfs -d modloop-modify "$MODLOOP_PATH"
        else
          # Fallback - u≈ºycie mount
          sudo mkdir -p /mnt/modloop
          sudo mount -o loop "$MODLOOP_PATH" /mnt/modloop
          sudo cp -a /mnt/modloop/* modloop-modify/
          sudo umount /mnt/modloop
          sudo chown -R $USER:$USER modloop-modify/
        fi
        
        # Sprawdzenie czy katalogi istniejƒÖ
        if [ ! -d "modloop-modify/etc" ]; then
          echo "‚ö†Ô∏è Katalog etc nie istnieje, tworzƒô podstawowƒÖ strukturƒô..."
          mkdir -p modloop-modify/etc/apk
          echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/main" > modloop-modify/etc/apk/repositories
          echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/community" >> modloop-modify/etc/apk/repositories
        fi
        
        # Sprawdzenie czy plik repositories istnieje przed modyfikacjƒÖ
        if [ ! -f "modloop-modify/etc/apk/repositories" ]; then
          echo "‚ö†Ô∏è Plik repositories nie istnieje, tworzƒô nowy..."
          mkdir -p modloop-modify/etc/apk
          echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/main" > modloop-modify/etc/apk/repositories
          echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/community" >> modloop-modify/etc/apk/repositories
        fi
        
        # Teraz bezpieczna modyfikacja
        echo "üìù Konfigurowanie lokalnego repozytorium APK..."
        echo "/media/cdrom/apks" >> modloop-modify/etc/apk/repositories
        
        # NIE kopiujemy pakietu do modloop - bƒôdzie w g≈Ç√≥wnym ISO
        echo "‚ö†Ô∏è Pakiet zostanie umieszczony w g≈Ç√≥wnym ISO, nie w modloop"
        
        echo "‚úÖ Modloop zmodyfikowany"

    - name: Rebuild modloop
      run: |
        echo "üî® Przebudowywanie modloop..."
        
        # Znajd≈∫ oryginalnƒÖ ≈õcie≈ºkƒô modloop
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        elif [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        fi
        
        echo "üì¶ Znaleziono modloop: $MODLOOP_PATH"
        
        # Sprawdzenie uprawnie≈Ñ
        echo "üîß Sprawdzanie uprawnie≈Ñ..."
        ls -la "$MODLOOP_PATH"
        
        # Backup oryginalnego (z sudo)
        sudo cp "$MODLOOP_PATH" "$MODLOOP_PATH.backup"
        
        # Tworzenie nowego modloop (tymczasowo)
        mksquashfs modloop-modify modloop-new.squashfs -comp xz -noappend
        
        # ZastƒÖpienie oryginalnego (z sudo)
        sudo cp modloop-new.squashfs "$MODLOOP_PATH"
        
        # SprzƒÖtanie
        rm modloop-new.squashfs
        
        echo "‚úÖ Nowy modloop utworzony"
        ls -la "$MODLOOP_PATH"

    - name: Create custom ISO
      run: |
        echo "üíø Tworzenie niestandardowego ISO..."
        
        # Sprawdzenie struktury ISO
        echo "Struktura ISO:"
        ls -la iso-contents/
        
        # Zmiana uprawnie≈Ñ na wszystkie pliki ISO
        echo "üîß Poprawianie uprawnie≈Ñ dla wszystkich plik√≥w ISO..."
        sudo chmod -R 755 iso-contents/
        sudo chown -R $USER:$USER iso-contents/
        
        # Znajd≈∫ katalog boot
        BOOT_DIR=""
        if [ -d "iso-contents/boot" ]; then
          BOOT_DIR="iso-contents/boot"
        else
          echo "‚ùå Nie mo≈ºna znale≈∫ƒá katalogu boot"
          exit 1
        fi
        
        # Dodanie naszego pakietu do g≈Ç√≥wnego ISO
        echo "üì¶ Dodawanie pakietu hardclone-cli do ISO..."
        mkdir -p iso-contents/apks
        cp alpine-build/apks/hardclone-cli-*.apk iso-contents/apks/
        cp alpine-build/apks/APKINDEX.tar.gz iso-contents/apks/
        
        echo "‚úÖ Pakiet dodany do ISO:"
        ls -la iso-contents/apks/
        
        # Sprawdzenie dostƒôpnych bootloader'√≥w
        echo "üîç Sprawdzanie bootloader'√≥w:"
        find iso-contents/boot -name "*.bin" -type f 2>/dev/null || true
        
        # Tworzenie ISO
        OUTPUT_ISO="alpine-hardclone-${{ env.ALPINE_VERSION }}-${{ env.ALPINE_ARCH }}.iso"
        
        if [ -f "$BOOT_DIR/isolinux/isolinux.bin" ]; then
          echo "ü•æ U≈ºywam ISOLINUX boot"
          genisoimage -r -J -b boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat \
                     -no-emul-boot -boot-load-size 4 -boot-info-table \
                     -V "Alpine-HardClone" -o "$OUTPUT_ISO" iso-contents/
        elif [ -f "$BOOT_DIR/syslinux/isolinux.bin" ]; then
          echo "ü•æ U≈ºywam SYSLINUX boot"
          sudo genisoimage -r -J -b boot/syslinux/isolinux.bin -c boot/syslinux/boot.cat \
                     -no-emul-boot -boot-load-size 4 -boot-info-table \
                     -V "Alpine-HardClone" -o "$OUTPUT_ISO" iso-contents/
          sudo chown $USER:$USER "$OUTPUT_ISO"
        else
          echo "‚ö†Ô∏è Nie znaleziono bootloader'a, tworzƒô ISO bez boot"
          genisoimage -r -J -V "Alpine-HardClone" -o "$OUTPUT_ISO" iso-contents/
        fi
        
        echo "‚úÖ Niestandardowe ISO utworzone: $OUTPUT_ISO"
        ls -la "$OUTPUT_ISO"

    - name: Upload ISO artifact
      uses: actions/upload-artifact@v4
      with:
        name: alpine-hardclone-iso
        path: alpine-hardclone-*.iso
        retention-days: 7

    - name: Create release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: auto-${{ github.run_number }}
        name: Alpine HardClone ISO Build ${{ github.run_number }}
        body: |
          Automatycznie zbudowane Alpine Linux ISO z hardclone-cli
          
          **Zawiera:**
          - Alpine Linux ${{ env.ALPINE_VERSION }}
          - hardclone-cli v2.1.4
          - Architektura: ${{ env.ALPINE_ARCH }}
          
          **Jak u≈ºyƒá:**
          1. Pobierz plik ISO
          2. Nagraj na USB lub CD
          3. Uruchom z tego medium
          4. U≈ºyj `hardclone` w terminalu
        files: alpine-hardclone-*.iso
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Show build summary
      run: |
        echo "üéâ Build completed successfully!"
        echo ""
        echo "üìã Build Summary:"
        echo "=================="
        echo "üêß Alpine Version: ${{ env.ALPINE_VERSION }}"
        echo "üèóÔ∏è Architecture: ${{ env.ALPINE_ARCH }}"
        echo "üì¶ Package: hardclone-cli v2.1.4"
        echo ""
        echo "üìÅ Generated files:"
        ls -la alpine-hardclone-*.iso 2>/dev/null || echo "‚ö†Ô∏è No ISO files found"
        echo ""
        echo "üí° ISO file is available as artifact even if release creation failed"
        echo "üí° You can download it from the Actions tab"
