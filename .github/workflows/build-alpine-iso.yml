name: Build Alpine ISO with hardclone-cli

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ALPINE_BRANCH: "v3.18"
  ALPINE_VERSION: "3.18.4"
  ALPINE_ARCH: "x86_64"
  APK_NAME: "hardclone-cli"
  APK_VER: "2.1.4"
  APK_REL: "r0"

jobs:
  build-iso:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          squashfs-tools \
          xorriso \
          syslinux-utils \
          genisoimage \
          curl \
          wget \
          git \
          python3 \
          python3-pip \
          python3-setuptools \
          python3-dev \
          dialog \
          tar \
          gzip

    - name: Setup Alpine build environment
      run: |
        mkdir -p alpine-build/{src,pkg,apks}
        echo "✅ Środowisko przygotowane"

    - name: Build hardclone-cli package
      run: |
        SRC_DIR="$(pwd)/alpine-build/src"
        APK_DIR="$(pwd)/alpine-build/apks"

        mkdir -p "$SRC_DIR/$APK_NAME"
        cd "$SRC_DIR/$APK_NAME"

        # Tworzymy demo pakietu
        mkdir -p hardclone
        touch hardclone/__init__.py
        printf '%s\n' "def main():" > hardclone/main.py
        printf '%s\n' '    print("hardclone-cli v2.1.4 - Hardware cloning utility")' >> hardclone/main.py
        printf '%s\n' '    print("This is a demo version")' >> hardclone/main.py
        printf '%s\n' 'if __name__ == "__main__":' >> hardclone/main.py
        printf '%s\n' '    main()' >> hardclone/main.py

        # Tworzymy setup.py
        printf '%s\n' "from setuptools import setup, find_packages" > setup.py
        printf '%s\n' "" >> setup.py
        printf '%s\n' "setup(" >> setup.py
        printf '%s\n' "    name=\"$APK_NAME\"," >> setup.py
        printf '%s\n' "    version=\"$APK_VER\"," >> setup.py
        printf '%s\n' "    packages=find_packages()," >> setup.py
        printf '%s\n' "    install_requires=[]," >> setup.py
        printf '%s\n' "    entry_points={" >> setup.py
        printf '%s\n' "        'console_scripts': [" >> setup.py
        printf '%s\n' "            'hardclone=hardclone.main:main'," >> setup.py
        printf '%s\n' "        ]," >> setup.py
        printf '%s\n' "    }," >> setup.py
        printf '%s\n' ")" >> setup.py

        # Tworzymy APKBUILD
        printf '%s\n' "# Maintainer: Dawid Bielecki <dawciobiel@gmail.com>" > APKBUILD
        printf '%s\n' "pkgname=$APK_NAME" >> APKBUILD
        printf '%s\n' "pkgver=$APK_VER" >> APKBUILD
        printf '%s\n' "pkgrel=0" >> APKBUILD
        printf '%s\n' 'pkgdesc="Hardware cloning utility"' >> APKBUILD
        printf '%s\n' 'url="https://github.com/dawciobiel/hardclone-cli"' >> APKBUILD
        printf '%s\n' 'arch="all"' >> APKBUILD
        printf '%s\n' 'license="GPL-3.0-or-later"' >> APKBUILD
        printf '%s\n' 'depends="python3 py3-pip py3-dialog dialog"' >> APKBUILD
        printf '%s\n' 'makedepends="python3-dev py3-setuptools"' >> APKBUILD
        printf '%s\n' 'source="hardclone-cli-$pkgver.tar.gz"' >> APKBUILD
        printf '%s\n' 'builddir="$srcdir/hardclone-cli-$pkgver"' >> APKBUILD
        printf '%s\n' "prepare() { default_prepare }" >> APKBUILD
        printf '%s\n' "build() { cd \"\$builddir\"; python3 setup.py build }" >> APKBUILD
        printf '%s\n' "package() { cd \"\$builddir\"; python3 setup.py install --root=\"\$pkgdir\" --optimize=1 }" >> APKBUILD
        printf '%s\n' 'sha512sums="SKIP"' >> APKBUILD
        
        # Tworzymy archiwum źródłowe
        cd ..
        tar -czf "$APK_DIR/$APK_NAME-$APK_VER.tar.gz" "$APK_NAME"
        
        # Symulujemy budowanie APK
        mkdir -p pkg-temp/usr/bin
        cp "$APK_NAME/hardclone/main.py" pkg-temp/usr/bin/hardclone
        chmod +x pkg-temp/usr/bin/hardclone
        
        tar -czf "$APK_DIR/$APK_NAME-$APK_VER-$APK_REL.apk" -C pkg-temp .


        echo "✅ Pakiet hardclone-cli zbudowany"
        ls -l "$APK_DIR"

    - name: Create APK repository index
      run: |
        APK_DIR="$(pwd)/alpine-build/apks"
        cd "$APK_DIR"
        printf '%s\n' "C:Q1/$APK_NAME-$APK_VER-$APK_REL" > APKINDEX
        printf '%s\n' "P:$APK_NAME" >> APKINDEX
        printf '%s\n' "V:$APK_VER-$APK_REL" >> APKINDEX
        printf '%s\n' "A:x86_64" >> APKINDEX
        printf '%s\n' "S:1024" >> APKINDEX
        printf '%s\n' "I:2048" >> APKINDEX
        printf '%s\n' "T:Hardware cloning utility" >> APKINDEX
        printf '%s\n' "U:https://github.com/dawciobiel/hardclone-cli" >> APKINDEX
        printf '%s\n' "L:GPL-3.0-or-later" >> APKINDEX
        printf '%s\n' "o:$APK_NAME" >> APKINDEX
        printf '%s\n' "m:Dawid Bielecki <dawciobiel@gmail.com>" >> APKINDEX
        printf '%s\n' "t:$(date +%s)" >> APKINDEX
        printf '%s\n' "c:Q1ABCD1234567890" >> APKINDEX
        tar -czf APKINDEX.tar.gz APKINDEX
        echo "✅ Indeks repozytorium utworzony"
        ls -l "$APK_DIR"

    - name: Download and prepare Alpine ISO
      run: |
        mkdir -p iso-download
        cd iso-download
        ISO_URL="https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_BRANCH }}/releases/${{ env.ALPINE_ARCH }}/alpine-standard-${{ env.ALPINE_VERSION }}-${{ env.ALPINE_ARCH }}.iso"
        wget -O alpine-standard.iso "$ISO_URL"
        echo "✅ Alpine ISO pobrane"

    - name: Extract ISO contents
      run: |
        mkdir -p iso-contents
        sudo mount -o loop iso-download/alpine-standard.iso /mnt
        sudo cp -r /mnt/* iso-contents/
        sudo umount /mnt
        sudo chown -R $USER:$USER iso-contents

    - name: Modify modloop
      run: |
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        else
          echo "❌ Cannot find modloop"
          find iso-contents -name "modloop*" -type f
          exit 1
        fi

        mkdir -p modloop-modify
        unsquashfs -d modloop-modify "$MODLOOP_PATH"

        mkdir -p modloop-modify/etc/apk
        echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_BRANCH }}/main" > modloop-modify/etc/apk/repositories
        echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_BRANCH }}/community" >> modloop-modify/etc/apk/repositories
        echo "/alpine-build/apks" >> modloop-modify/etc/apk/repositories

        mkdir -
