name: üèîÔ∏è Build Custom Alpine Linux ISO

on:
  workflow_dispatch:
    inputs:
      alpine_version:
        description: 'Alpine Linux version'
        required: true
        default: 'v3.18'
        type: choice
        options:
          - v3.18
          - v3.19
          - v3.20
          - edge
      alpine_arch:
        description: 'Architecture'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - aarch64
      kernel_type:
        description: 'Kernel type'
        required: true
        default: 'lts'
        type: choice
        options:
          - lts
          - standard
      packages:
        description: 'Additional packages (space separated)'
        required: false
        default: 'curl wget htop nano vim git'
        type: string

jobs:
  build-iso:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üîß Setup Build Environment
      run: |
        echo "üîß Instalowanie narzƒôdzi..."
        sudo apt-get update
        sudo apt-get install -y \
          wget curl xorriso squashfs-tools cpio gzip \
          syslinux syslinux-utils isolinux \
          build-essential bc kmod cpio flex libelf-dev libssl-dev

    - name: üì¶ Download Alpine ISO
      run: |
        ALPINE_VERSION="${{ github.event.inputs.alpine_version }}"
        ALPINE_ARCH="${{ github.event.inputs.alpine_arch }}"
        KERNEL_TYPE="${{ github.event.inputs.kernel_type }}"
        
        echo "üì• Pobieranie Alpine Linux ${ALPINE_VERSION} ${ALPINE_ARCH}..."
        
        if [ "$ALPINE_VERSION" = "edge" ]; then
          ISO_URL="https://dl-cdn.alpinelinux.org/alpine/edge/releases/${ALPINE_ARCH}/alpine-${KERNEL_TYPE}-${ALPINE_VERSION}-${ALPINE_ARCH}.iso"
        else
          # Sprawd≈∫ najnowszƒÖ wersjƒô dla stabilnych release'√≥w
          LATEST=$(curl -s "https://dl-cdn.alpinelinux.org/alpine/${ALPINE_VERSION}/releases/${ALPINE_ARCH}/" | grep -oP "alpine-${KERNEL_TYPE}-\K[0-9]+\.[0-9]+\.[0-9]+" | sort -V | tail -1)
          if [ -n "$LATEST" ]; then
            ISO_URL="https://dl-cdn.alpinelinux.org/alpine/${ALPINE_VERSION}/releases/${ALPINE_ARCH}/alpine-${KERNEL_TYPE}-${LATEST}-${ALPINE_ARCH}.iso"
          else
            # Fallback do bezpo≈õredniego linku
            ISO_URL="https://dl-cdn.alpinelinux.org/alpine/${ALPINE_VERSION}/releases/${ALPINE_ARCH}/alpine-${KERNEL_TYPE}-${ALPINE_VERSION}-${ALPINE_ARCH}.iso"
          fi
        fi
        
        echo "üåê URL: $ISO_URL"
        wget -O alpine-original.iso "$ISO_URL"
        
        if [ ! -f alpine-original.iso ] || [ ! -s alpine-original.iso ]; then
          echo "‚ùå Nie uda≈Ço siƒô pobraƒá ISO!"
          exit 1
        fi
        
        echo "‚úÖ ISO pobrane: $(ls -lh alpine-original.iso)"
      env:
        ALPINE_VERSION: ${{ github.event.inputs.alpine_version }}
        ALPINE_ARCH: ${{ github.event.inputs.alpine_arch }}

    - name: üîì Extract ISO
      run: |
        echo "üîì Rozpakowywanie ISO..."
        mkdir -p iso-contents
        sudo mount -o loop alpine-original.iso /mnt
        sudo cp -a /mnt/* iso-contents/ 2>/dev/null || true
        sudo cp -a /mnt/.* iso-contents/ 2>/dev/null || true
        sudo umount /mnt
        
        # Uprawnienia dla ca≈Çego katalogu
        sudo chown -R $USER:$USER iso-contents/
        sudo chmod -R u+w iso-contents/
        
        echo "üìÇ Zawarto≈õƒá ISO:"
        find iso-contents -type f -name "modloop*" -o -name "*.iso" | head -10

    - name: üîç Locate and Extract Modloop
      run: |
        echo "üîç Szukanie modloop..."
        
        # Znajd≈∫ modloop
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        else
          echo "‚ùå Nie znaleziono modloop!"
          find iso-contents -name "*modloop*" -type f
          exit 1
        fi
        
        echo "üì¶ Znaleziony modloop: $MODLOOP_PATH"
        echo "MODLOOP_PATH=$MODLOOP_PATH" >> $GITHUB_ENV
        
        # Sprawd≈∫ integralno≈õƒá
        if ! unsquashfs -l "$MODLOOP_PATH" >/dev/null; then
          echo "‚ùå Modloop jest uszkodzony!"
          exit 1
        fi
        
        # Rozpakuj modloop
        echo "üì§ Rozpakowywanie modloop..."
        rm -rf modloop-contents modloop-modify
        unsquashfs -d modloop-contents "$MODLOOP_PATH"
        
        if [ ! -d "modloop-contents" ]; then
          echo "‚ùå Nie uda≈Ço siƒô rozpakowaƒá modloop!"
          exit 1
        fi
        
        # Skopiuj do modyfikacji
        cp -a modloop-contents modloop-modify
        echo "‚úÖ Modloop rozpakowany"

    - name: üé® Customize Alpine
      run: |
        echo "üé® Personalizacja Alpine Linux..."
        
        cd modloop-modify
        
        # Sprawd≈∫ strukturƒô
        echo "üìÇ Struktura modloop:"
        find . -maxdepth 3 -type d | head -20
        
        # Znajd≈∫ katalog z modu≈Çami
        MODULE_DIR=""
        if [ -d "lib/modules" ]; then
          MODULE_DIR="lib/modules"
        elif [ -d "modules" ]; then
          MODULE_DIR="modules"
        else
          echo "‚ùå Nie znaleziono katalogu z modu≈Çami!"
          ls -la
          exit 1
        fi
        
        echo "üîç Katalog modu≈Ç√≥w: $MODULE_DIR"
        
        # Dodaj przyk≈Çadowy plik konfiguracyjny
        mkdir -p etc/custom
        cat > etc/custom/welcome.txt << 'EOF'
        ================================================
        üèîÔ∏è  CUSTOM ALPINE LINUX ISO
        ================================================
        
        Witaj w spersonalizowanym Alpine Linux!
        
        Dodatkowe pakiety:
        ${{ github.event.inputs.packages }}
        
        Build: $(date)
        Wersja: ${{ github.event.inputs.alpine_version }}
        Architektura: ${{ github.event.inputs.alpine_arch }}
        Kernel: ${{ github.event.inputs.kernel_type }}
        
        ================================================
        EOF
        
        # Dodaj skrypt startowy
        mkdir -p etc/local.d
        cat > etc/local.d/custom-welcome.start << 'EOF'
        #!/bin/sh
        if [ -f /etc/custom/welcome.txt ]; then
          cat /etc/custom/welcome.txt
        fi
        EOF
        chmod +x etc/local.d/custom-welcome.start
        
        # Dodaj alias do bashrc
        if [ -f etc/bash/bashrc ]; then
          echo 'alias ll="ls -la"' >> etc/bash/bashrc
          echo 'alias welcome="cat /etc/custom/welcome.txt"' >> etc/bash/bashrc
        fi
        
        echo "‚úÖ Customizacja zako≈Ñczona"
        cd ..

    - name: üî® Rebuild Modloop
      run: |
        echo "üî® Przebudowywanie modloop..."
        
        # Znajd≈∫ modloop ponownie
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        fi
        
        if [ -z "$MODLOOP_PATH" ]; then
          echo "‚ùå Nie znaleziono modloop!"
          exit 1
        fi
        
        echo "üì¶ Przebudowywanie: $MODLOOP_PATH"
        
        # Uprawnienia - najpierw sudo dla ca≈Çego katalogu
        sudo chown -R $USER:$USER iso-contents/
        sudo chmod -R u+w iso-contents/
        
        # Sprawd≈∫ czy mamy uprawnienia
        if [ ! -w "$(dirname "$MODLOOP_PATH")" ]; then
          echo "‚ö†Ô∏è  Brak uprawnie≈Ñ zapisu, u≈ºywam sudo..."
          # Backup z sudo
          sudo cp "$MODLOOP_PATH" "$MODLOOP_PATH.backup"
          # Rebuild z sudo
          sudo mksquashfs modloop-modify "$MODLOOP_PATH" -comp xz -noappend
          # Przywr√≥ƒá uprawnienia
          sudo chown $USER:$USER "$MODLOOP_PATH"
        else
          # Standardowa procedura
          cp "$MODLOOP_PATH" "$MODLOOP_PATH.backup"
          mksquashfs modloop-modify "$MODLOOP_PATH" -comp xz -noappend
        fi
        
        echo "‚úÖ Modloop przebudowany"
        ls -la "$MODLOOP_PATH"
        
        # Weryfikacja
        echo "üîç Weryfikacja integralno≈õci..."
        if unsquashfs -l "$MODLOOP_PATH" >/dev/null 2>&1; then
          echo "‚úÖ Modloop jest prawid≈Çowy"
        else
          echo "‚ùå Modloop jest uszkodzony, przywracam backup..."
          if [ -f "$MODLOOP_PATH.backup" ]; then
            if [ ! -w "$(dirname "$MODLOOP_PATH")" ]; then
              sudo cp "$MODLOOP_PATH.backup" "$MODLOOP_PATH"
            else
              cp "$MODLOOP_PATH.backup" "$MODLOOP_PATH"
            fi
            echo "‚úÖ Backup przywr√≥cony"
          fi
          exit 1
        fi

    - name: üìù Update Boot Configuration
      run: |
        echo "üìù Aktualizacja konfiguracji boot..."
        
        # Znajd≈∫ i zaktualizuj isolinux/syslinux
        if [ -f "iso-contents/boot/syslinux/syslinux.cfg" ]; then
          BOOT_CFG="iso-contents/boot/syslinux/syslinux.cfg"
        elif [ -f "iso-contents/syslinux/syslinux.cfg" ]; then
          BOOT_CFG="iso-contents/syslinux/syslinux.cfg"
        elif [ -f "iso-contents/isolinux/isolinux.cfg" ]; then
          BOOT_CFG="iso-contents/isolinux/isolinux.cfg"
        else
          echo "‚ö†Ô∏è  Nie znaleziono pliku konfiguracji boot"
          find iso-contents -name "*.cfg" | head -5
          BOOT_CFG=""
        fi
        
        if [ -n "$BOOT_CFG" ]; then
          echo "üîß Aktualizacja: $BOOT_CFG"
          # Backup
          cp "$BOOT_CFG" "$BOOT_CFG.backup"
          
          # Dodaj custom label
          if ! grep -q "CUSTOM ALPINE" "$BOOT_CFG"; then
            sed -i 's/LABEL alpine/LABEL alpine\n  MENU LABEL Custom Alpine Linux\n  KERNEL \/boot\/vmlinuz-lts\n  APPEND initrd=\/boot\/initramfs-lts modloop=\/boot\/modloop-lts modules=loop,squashfs,sd-mod,usb-storage quiet/' "$BOOT_CFG"
          fi
          
          echo "‚úÖ Konfiguracja boot zaktualizowana"
        fi

    - name: üéØ Create Custom ISO
      run: |
        echo "üéØ Tworzenie custom ISO..."
        
        # Nazwa pliku wyj≈õciowego
        OUTPUT_NAME="alpine-custom-${{ github.event.inputs.alpine_version }}-${{ github.event.inputs.alpine_arch }}-$(date +%Y%m%d).iso"
        
        # Sprawd≈∫ czy mamy wszystkie potrzebne pliki
        if [ ! -f "iso-contents/boot/vmlinuz-lts" ] && [ ! -f "iso-contents/boot/vmlinuz-standard" ]; then
          echo "‚ùå Nie znaleziono kernela!"
          find iso-contents -name "vmlinuz*"
          exit 1
        fi
        
        if [ ! -f "iso-contents/boot/initramfs-lts" ] && [ ! -f "iso-contents/boot/initramfs-standard" ]; then
          echo "‚ùå Nie znaleziono initramfs!"
          find iso-contents -name "initramfs*"
          exit 1
        fi
        
        # Uprawnienia przed budowaniem
        sudo chown -R $USER:$USER iso-contents/
        find iso-contents -type f -exec chmod 644 {} \;
        find iso-contents -type d -exec chmod 755 {} \;
        
        # Specjalne uprawnienia dla boot
        if [ -f "iso-contents/boot/syslinux/isolinux.bin" ]; then
          chmod 644 iso-contents/boot/syslinux/isolinux.bin
        fi
        if [ -f "iso-contents/isolinux/isolinux.bin" ]; then
          chmod 644 iso-contents/isolinux/isolinux.bin
        fi
        
        echo "üî® Budowanie ISO..."
        
        # Sprawd≈∫ czy mamy isolinux
        ISOLINUX_BIN=""
        if [ -f "iso-contents/boot/syslinux/isolinux.bin" ]; then
          ISOLINUX_BIN="boot/syslinux/isolinux.bin"
          BOOT_CAT="boot/syslinux/boot.cat"
        elif [ -f "iso-contents/isolinux/isolinux.bin" ]; then
          ISOLINUX_BIN="isolinux/isolinux.bin"
          BOOT_CAT="isolinux/boot.cat"
        else
          echo "‚ùå Nie znaleziono isolinux.bin!"
          find iso-contents -name "isolinux.bin"
          exit 1
        fi
        
        # Buduj ISO z xorriso
        xorriso -as mkisofs \
          -o "$OUTPUT_NAME" \
          -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
          -c "$BOOT_CAT" \
          -b "$ISOLINUX_BIN" \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -e boot/grub/efi.img \
          -no-emul-boot \
          -isohybrid-gpt-basdat \
          -V "CUSTOM_ALPINE" \
          iso-contents/
        
        if [ ! -f "$OUTPUT_NAME" ]; then
          echo "‚ùå Nie uda≈Ço siƒô utworzyƒá ISO!"
          exit 1
        fi
        
        echo "‚úÖ ISO utworzone: $OUTPUT_NAME"
        ls -lh "$OUTPUT_NAME"
        
        # Zapisz nazwƒô pliku
        echo "ISO_NAME=$OUTPUT_NAME" >> $GITHUB_ENV

    - name: ‚úÖ Verify ISO
      run: |
        echo "‚úÖ Weryfikacja ISO..."
        
        if [ ! -f "$ISO_NAME" ]; then
          echo "‚ùå Plik ISO nie istnieje!"
          exit 1
        fi
        
        # Sprawd≈∫ rozmiar
        SIZE=$(stat -c%s "$ISO_NAME")
        SIZE_MB=$((SIZE / 1024 / 1024))
        
        echo "üìä Rozmiar ISO: ${SIZE_MB}MB"
        
        if [ "$SIZE_MB" -lt 50 ]; then
          echo "‚ö†Ô∏è  ISO wydaje siƒô za ma≈Çe!"
          exit 1
        fi
        
        # Sprawd≈∫ czy mo≈ºna zamontowaƒá
        mkdir -p test-mount
        if sudo mount -o loop "$ISO_NAME" test-mount/; then
          echo "‚úÖ ISO mo≈ºna zamontowaƒá"
          ls -la test-mount/ | head -10
          sudo umount test-mount/
        else
          echo "‚ùå Nie mo≈ºna zamontowaƒá ISO!"
          exit 1
        fi
        
        echo "üéâ ISO jest prawid≈Çowe!"

    - name: üì§ Upload ISO
      uses: actions/upload-artifact@v4
      with:
        name: custom-alpine-iso-${{ github.event.inputs.alpine_version }}-${{ github.event.inputs.alpine_arch }}
        path: alpine-custom-*.iso
        retention-days: 30

    - name: üìä Build Summary
      run: |
        echo "## üèîÔ∏è Custom Alpine ISO Build Complete! " >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Build Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ github.event.inputs.alpine_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ${{ github.event.inputs.alpine_arch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Kernel:** ${{ github.event.inputs.kernel_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Additional Packages:** ${{ github.event.inputs.packages }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "$ISO_NAME" ]; then
          SIZE=$(stat -c%s "$ISO_NAME")
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "### üì¶ ISO Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Filename:** $ISO_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** ${SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ ISO jest gotowe do pobrania z sekcji Artifacts!" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **ERROR:** ISO nie zosta≈Ço utworzone!" >> $GITHUB_STEP_SUMMARY
        fi
