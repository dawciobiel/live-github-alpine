name: Build Alpine ISO with hardclone-cli

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ALPINE_VERSION: "v3.18"
  ALPINE_ARCH: "x86_64"

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          squashfs-tools \
          xorriso \
          syslinux-utils \
          genisoimage \
          curl \
          wget \
          git \
          python3 \
          python3-pip \
          python3-setuptools \
          python3-dev \
          python3-dialog \
          dialog \
          tar \
          gzip \
          binutils

    - name: Setup Alpine build environment
      run: |
        mkdir -p alpine-build/apks
        echo "✅ Środowisko przygotowane"

    - name: Build hardclone-cli package
      run: |
        cd alpine-build
        
        echo "📦 Tworzenie pakietu hardclone-cli..."
        
        # Tworzenie struktury pakietu (bez katalogu .PKGINFO!)
        mkdir -p pkg/usr/bin
        
        # Tworzenie skryptu hardclone
        printf '#!/bin/sh\n' > pkg/usr/bin/hardclone
        printf 'echo "hardclone-cli v2.1.4 - Hardware cloning utility"\n' >> pkg/usr/bin/hardclone
        printf 'echo "This is a demo version for Alpine Linux"\n' >> pkg/usr/bin/hardclone
        printf 'echo ""\n' >> pkg/usr/bin/hardclone
        printf 'echo "Usage: hardclone [options]"\n' >> pkg/usr/bin/hardclone
        printf 'echo "  --help    Show this help"\n' >> pkg/usr/bin/hardclone
        printf 'echo "  --version Show version"\n' >> pkg/usr/bin/hardclone
        printf 'echo ""\n' >> pkg/usr/bin/hardclone
        printf 'echo "Demo commands available:"\n' >> pkg/usr/bin/hardclone
        printf 'echo "  hardclone --disk-info    Show disk information"\n' >> pkg/usr/bin/hardclone
        printf 'echo "  hardclone --list-drives  List available drives"\n' >> pkg/usr/bin/hardclone
        printf 'echo ""\n' >> pkg/usr/bin/hardclone
        printf 'case "$1" in\n' >> pkg/usr/bin/hardclone
        printf '  --help|-h)\n' >> pkg/usr/bin/hardclone
        printf '    echo "Help displayed above"\n' >> pkg/usr/bin/hardclone
        printf '    ;;\n' >> pkg/usr/bin/hardclone
        printf '  --version|-v)\n' >> pkg/usr/bin/hardclone
        printf '    echo "hardclone-cli v2.1.4"\n' >> pkg/usr/bin/hardclone
        printf '    ;;\n' >> pkg/usr/bin/hardclone
        printf '  --disk-info)\n' >> pkg/usr/bin/hardclone
        printf '    echo "=== Disk Information ==="\n' >> pkg/usr/bin/hardclone
        printf '    lsblk 2>/dev/null || echo "lsblk not available"\n' >> pkg/usr/bin/hardclone
        printf '    ;;\n' >> pkg/usr/bin/hardclone
        printf '  --list-drives)\n' >> pkg/usr/bin/hardclone
        printf '    echo "=== Available Drives ==="\n' >> pkg/usr/bin/hardclone
        printf '    ls -la /dev/sd* /dev/nvme* 2>/dev/null || echo "No drives found"\n' >> pkg/usr/bin/hardclone
        printf '    ;;\n' >> pkg/usr/bin/hardclone
        printf '  *)\n' >> pkg/usr/bin/hardclone
        printf '    echo "Use --help for available options"\n' >> pkg/usr/bin/hardclone
        printf '    ;;\n' >> pkg/usr/bin/hardclone
        printf 'esac\n' >> pkg/usr/bin/hardclone
        
        chmod +x pkg/usr/bin/hardclone
        
        # Tworzenie .PKGINFO jako PLIK
        printf 'pkgname = hardclone-cli\n' > pkg/.PKGINFO
        printf 'pkgver = 2.1.4-r0\n' >> pkg/.PKGINFO
        printf 'pkgdesc = Hardware cloning utility\n' >> pkg/.PKGINFO
        printf 'url = https://github.com/yourusername/hardclone-cli\n' >> pkg/.PKGINFO
        printf 'builddate = 1693353600\n' >> pkg/.PKGINFO
        printf 'packager = Auto Builder <builder@example.com>\n' >> pkg/.PKGINFO
        printf 'size = 2048\n' >> pkg/.PKGINFO
        printf 'arch = x86_64\n' >> pkg/.PKGINFO
        printf 'origin = hardclone-cli\n' >> pkg/.PKGINFO
        printf 'commit = demo123\n' >> pkg/.PKGINFO
        printf 'maintainer = Auto Builder <builder@example.com>\n' >> pkg/.PKGINFO
        
        # Tworzenie właściwego pakietu APK
        cd pkg
        
        # Tworzenie control.tar.gz (metadane)
        tar -czf ../control.tar.gz .PKGINFO
        
        # Tworzenie data.tar.gz (pliki)
        tar -czf ../data.tar.gz usr/
        
        # Tworzenie pakietu APK (ar archive)
        cd ..
        echo "2.0" > debian-binary
        ar r apks/hardclone-cli-2.1.4-r0.apk debian-binary control.tar.gz data.tar.gz
        
        # Sprzątanie
        rm debian-binary control.tar.gz data.tar.gz
        
        echo "✅ Pakiet hardclone-cli zbudowany (prawdziwy format APK)"
        ls -la apks/
        file apks/hardclone-cli-2.1.4-r0.apk

    - name: Create APK repository index
      run: |
        cd alpine-build/apks
        
        echo "📦 Tworzenie indeksu repozytorium APK..."
        ls -la
        
        # Sprawdzenie pakietów
        if ! ls *.apk 1> /dev/null 2>&1; then
          echo "❌ Brak plików APK"
          exit 1
        fi
        
        for apk in *.apk; do
          echo "Processing: $apk"
        done
        
        # Generowanie klucza podpisywania
        echo "🔐 Generowanie klucza podpisywania..."
        openssl genrsa -out signing.key 2048
        openssl rsa -in signing.key -pubout -out signing.pub
        
        # Tworzenie APKINDEX
        printf 'C:Q1/hardclone-cli-2.1.4-r0\n' > APKINDEX
        printf 'P:hardclone-cli\n' >> APKINDEX
        printf 'V:2.1.4-r0\n' >> APKINDEX
        printf 'A:x86_64\n' >> APKINDEX
        printf 'S:1024\n' >> APKINDEX
        printf 'I:2048\n' >> APKINDEX
        printf 'T:Hardware cloning utility\n' >> APKINDEX
        printf 'U:https://github.com/yourusername/hardclone-cli\n' >> APKINDEX
        printf 'L:MIT\n' >> APKINDEX
        printf 'o:hardclone-cli\n' >> APKINDEX
        printf 'm:Auto Builder <builder@example.com>\n' >> APKINDEX
        printf 't:1693353600\n' >> APKINDEX
        printf 'c:Q1ABCD1234567890\n' >> APKINDEX
        printf '\n' >> APKINDEX
        
        tar -czf APKINDEX.tar.gz APKINDEX
        
        # Podpisanie
        if command -v openssl >/dev/null 2>&1; then
          openssl dgst -sha1 -sign signing.key APKINDEX.tar.gz | openssl base64 > APKINDEX.tar.gz.sig
          echo "✅ Indeks podpisany"
        fi
        
        echo "✅ Indeks utworzony:"
        ls -la APKINDEX.tar.gz*

    - name: Download and prepare Alpine ISO
      run: |
        echo "🔽 Pobieranie Alpine Linux ISO..."
        mkdir -p iso-download
        cd iso-download
        
        ISO_URL="https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/releases/${{ env.ALPINE_ARCH }}/alpine-standard-3.18.0-${{ env.ALPINE_ARCH }}.iso"
        
        echo "Pobieranie z: $ISO_URL"
        if ! wget -O alpine-standard.iso "$ISO_URL"; then
          echo "❌ Błąd pobierania ISO"
          exit 1
        fi
        
        echo "✅ Alpine ISO pobrane"
        ls -la alpine-standard.iso

    - name: Extract ISO contents
      run: |
        echo "📦 Rozpakowywanie zawartości ISO..."
        mkdir -p iso-contents
        cd iso-download
        
        sudo mkdir -p /mnt/iso
        sudo mount -o loop alpine-standard.iso /mnt/iso
        sudo cp -r /mnt/iso/* ../iso-contents/
        sudo umount /mnt/iso
        sudo chown -R $USER:$USER ../iso-contents/
        
        echo "✅ Zawartość ISO rozpakowana"
        ls -la ../iso-contents/

    - name: Modify modloop
      run: |
        # Znajdź modloop
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        else
          echo "❌ Nie można znaleźć modloop"
          find iso-contents -name "*modloop*" -type f
          exit 1
        fi
        
        echo "📦 Rozpakowywanie modloop z: $MODLOOP_PATH"
        mkdir -p modloop-modify
        
        # Rozpakowanie modloop
        if command -v unsquashfs >/dev/null 2>&1; then
          unsquashfs -d modloop-modify "$MODLOOP_PATH"
        else
          sudo mkdir -p /mnt/modloop
          sudo mount -o loop "$MODLOOP_PATH" /mnt/modloop
          sudo cp -a /mnt/modloop/* modloop-modify/
          sudo umount /mnt/modloop
          sudo chown -R $USER:$USER modloop-modify/
        fi
        
        # Konfiguracja repositories
        if [ ! -d "modloop-modify/etc" ]; then
          echo "⚠️ Tworzę strukturę etc..."
          mkdir -p modloop-modify/etc/apk
        fi
        
        if [ ! -f "modloop-modify/etc/apk/repositories" ]; then
          echo "⚠️ Tworzę plik repositories..."
          mkdir -p modloop-modify/etc/apk
          echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/main" > modloop-modify/etc/apk/repositories
          echo "https://dl-cdn.alpinelinux.org/alpine/${{ env.ALPINE_VERSION }}/community" >> modloop-modify/etc/apk/repositories
        fi
        
        # Dodanie lokalnego repo
        echo "/media/cdrom/apks" >> modloop-modify/etc/apk/repositories
        
        echo "✅ Modloop zmodyfikowany"

    - name: Rebuild modloop
      run: |
        echo "🔨 Przebudowywanie modloop..."
        
        # Znajdź modloop ponownie
        MODLOOP_PATH=""
        if [ -f "iso-contents/boot/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-lts"
        elif [ -f "iso-contents/boot/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/modloop-standard"
        elif [ -f "iso-contents/boot/x86_64/modloop-lts" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-lts"
        elif [ -f "iso-contents/boot/x86_64/modloop-standard" ]; then
          MODLOOP_PATH="iso-contents/boot/x86_64/modloop-standard"
        fi
        
        echo "📦 Przebudowywanie: $MODLOOP_PATH"
        
        # Uprawnienia
        sudo chown -R $USER:$USER iso-contents/
        
        # Backup i rebuild
        cp "$MODLOOP_PATH" "$MODLOOP_PATH.backup"
        mksquashfs modloop-modify "$MODLOOP_PATH" -comp xz -noappend
        
        echo "✅ Modloop przebudowany"
        ls -la "$MODLOOP_PATH"

    - name: Create custom ISO
      run: |
        echo "💿 Tworzenie niestandardowego ISO..."
        
        # Dodanie pakietu do głównego ISO
        echo "📦 Dodawanie pakietu do ISO..."
        mkdir -p iso-contents/apks
        cp alpine-build/apks/hardclone-cli-*.apk iso-contents/apks/
        cp alpine-build/apks/APKINDEX.tar.gz iso-contents/apks/
        cp alpine-build/apks/signing.pub iso-contents/apks/ 2>/dev/null || true
        
        echo "✅ Pakiet dodany:"
        ls -la iso-contents/apks/
        
        # Poprawka uprawnień
        sudo chmod -R 755 iso-contents/
        sudo chown -R $USER:$USER iso-contents/
        
        # Znajdź bootloader
        BOOT_DIR="iso-contents/boot"
        OUTPUT_ISO="alpine-hardclone-${{ env.ALPINE_VERSION }}-${{ env.ALPINE_ARCH }}.iso"
        
        echo "🔍 Sprawdzanie bootloader'ów:"
        find iso-contents/boot -name "*.bin" -type f 2>/dev/null || true
        
        if [ -f "$BOOT_DIR/syslinux/isolinux.bin" ]; then
          echo "🥾 Używam SYSLINUX"
          sudo genisoimage -r -J -b boot/syslinux/isolinux.bin -c boot/syslinux/boot.cat \
                     -no-emul-boot -boot-load-size 4 -boot-info-table \
                     -V "Alpine-HardClone" -o "$OUTPUT_ISO" iso-contents/
          sudo chown $USER:$USER "$OUTPUT_ISO"
        elif [ -f "$BOOT_DIR/isolinux/isolinux.bin" ]; then
          echo "🥾 Używam ISOLINUX"
          genisoimage -r -J -b boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat \
                     -no-emul-boot -boot-load-size 4 -boot-info-table \
                     -V "Alpine-HardClone" -o "$OUTPUT_ISO" iso-contents/
        else
          echo "⚠️ Tworzę ISO bez bootloader'a"
          genisoimage -r -J -V "Alpine-HardClone" -o "$OUTPUT_ISO" iso-contents/
        fi
        
        echo "✅ ISO utworzone: $OUTPUT_ISO"
        ls -la "$OUTPUT_ISO"

    - name: Upload ISO artifact
      uses: actions/upload-artifact@v4
      with:
        name: alpine-hardclone-iso
        path: alpine-hardclone-*.iso
        retention-days: 7

    - name: Create release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: auto-${{ github.run_number }}
        name: Alpine HardClone ISO Build ${{ github.run_number }}
        body: |
          Automatycznie zbudowane Alpine Linux ISO z hardclone-cli
          
          **Zawiera:**
          - Alpine Linux ${{ env.ALPINE_VERSION }}
          - hardclone-cli v2.1.4
          - Architektura: ${{ env.ALPINE_ARCH }}
          
          **Jak użyć:**
          1. Pobierz plik ISO
          2. Nagraj na USB lub CD
          3. Uruchom z tego medium
          4. Zainstaluj pakiet: `apk add --allow-untrusted /media/cdrom/apks/hardclone-cli-2.1.4-r0.apk`
          5. Użyj: `hardclone --help`
        files: alpine-hardclone-*.iso
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Show build summary
      run: |
        echo "🎉 Build completed!"
        echo ""
        echo "📋 Summary:"
        echo "🐧 Alpine: ${{ env.ALPINE_VERSION }}"
        echo "🏗️ Arch: ${{ env.ALPINE_ARCH }}"
        echo "📦 Package: hardclone-cli v2.1.4"
        echo ""
        echo "📁 Files:"
        ls -la alpine-hardclone-*.iso 2>/dev/null || echo "⚠️ No ISO found"
        echo ""
        echo "💡 To install package in Alpine:"
        echo "   apk add --allow-untrusted /media/cdrom/apks/hardclone-cli-2.1.4-r0.apk"
